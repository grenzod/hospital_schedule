import os
from pydantic import BaseModel, Field
from src.rag.file_loader import Loader
from src.rag.vectorstore import VectorDB
from src.rag.offline_rag import Offline_RAG

class InputQA(BaseModel):
    question: str = Field(..., description="The question to ask the model.")

class OutputQA(BaseModel):
    answer: str = Field(..., description="The answer generated by the model.")

def build_rag_chain(llm, data_dir, data_type):
    current_dir = os.path.dirname(os.path.abspath(__file__))
    vector_db_path = os.path.join(current_dir, 'vector_db')
    
    if os.path.exists(vector_db_path) and os.listdir(vector_db_path):
        retriever = VectorDB(persist_directory=vector_db_path).load_db().as_retriever()
    else:
        doc_loader = Loader(file_type=data_type).load_dir(data_dir, workers=1)
        retriever = VectorDB(document=doc_loader).get_retriever()
    rag_chain = Offline_RAG(llm).get_chain(retriever)
    return rag_chain
